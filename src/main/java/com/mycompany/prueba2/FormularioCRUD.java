/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.prueba2;

import com.mycompany.prueba2.Prueba2;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.mycompany.prueba2.Talonario;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.mycompany.prueba2.TalonarioDAO;

/**
 *
 * @author Usuario
 */
public class FormularioCRUD extends javax.swing.JFrame {

    private Connection conexion;
    private DefaultTableModel modeloTabla;

    /**
     * Creates new form FormularioCRUD
     */
    public FormularioCRUD() {
        try {
            conexion = CConexion.getConnection();
            JOptionPane.showMessageDialog(this, "Conexión exitosa a la base de datos Oracle");
            initComponents(); // Solo se inicializa la GUI si la conexión fue exitosa
            inicializarModeloTabla(); // Inicializar el modelo de tabla
            mostrarTalonarios(); // Mostrar los talonarios en la tabla
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos Oracle: " + ex.getMessage(), "Error de conexión", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            System.exit(1); // Salir del programa si no se puede conectar a la base de datos
        }

        // Mensaje de depuración para verificar si tblTalonario tiene un modelo de tabla asignado
        if (tblTalonario.getModel() != null) {
            System.out.println("Modelo de tabla asignado correctamente a tblTalonario.");
        } else {
            System.out.println("No se ha asignado ningún modelo de tabla a tblTalonario.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblDescripcion = new javax.swing.JLabel();
        lblPremio = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblValorNum = new javax.swing.JLabel();
        tfDescripcion = new javax.swing.JTextField();
        tfPremio = new javax.swing.JTextField();
        tfFecha = new javax.swing.JTextField();
        tfValorNum = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTalonario = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Talonario"));

        lblDescripcion.setText("Descripción:");

        lblPremio.setText("Premio:");

        lblFecha.setText("Fecha:");

        lblValorNum.setText("Valor del numero:");

        tfDescripcion.setText("Se recaundan fondos ");
        tfDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescripcionActionPerformed(evt);
            }
        });

        tfPremio.setText("Pizza, 100 mil,etc");
        tfPremio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPremioActionPerformed(evt);
            }
        });

        tfFecha.setText("2024-02-18");

        tfValorNum.setText("100,5000");
        tfValorNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfValorNumActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addComponent(lblDescripcion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPremio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfDescripcion, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfPremio, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfFecha, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblValorNum, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfValorNum, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDescripcion)
                .addGap(1, 1, 1)
                .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPremio)
                .addGap(1, 1, 1)
                .addComponent(tfPremio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFecha)
                .addGap(1, 1, 1)
                .addComponent(tfFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblValorNum)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfValorNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblTalonario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblTalonario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTalonarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTalonario);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
// Obtener el ID del talonario seleccionado en la tabla
        int filaSeleccionada = tblTalonario.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idTalonario = (int) tblTalonario.getValueAt(filaSeleccionada, 0); // Suponiendo que el ID está en la primera columna
            try {
                // Llamar al método eliminarTalonario de TalonarioDAO pasando el ID como parámetro
                TalonarioDAO talonarioDAO = new TalonarioDAO(conexion);
                talonarioDAO.eliminarTalonario(idTalonario);
                // Actualizar la tabla después de eliminar el talonario
                mostrarTalonarios();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al eliminar el talonario: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un talonario para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        String descripcion = tfDescripcion.getText();
        String premio = tfPremio.getText();
        String fecha = tfFecha.getText();
        int valorNumero;

        // Mostrar los valores de los campos de texto para depuración
        System.out.println("Valor de tfDescripcion: " + descripcion);
        System.out.println("Valor de tfPremio: " + premio);
        System.out.println("Valor de tfFecha: " + fecha);
        System.out.println("Valor de tfValorNum: " + tfValorNum.getText());

        try {
            valorNumero = Integer.parseInt(tfValorNum.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingresa números válidos para Cantidad de Números y Valor del Número.", "Error de conversión", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si ocurre un error de conversión
        }

        // Validaciones
        if (descripcion.isEmpty() || premio.isEmpty() || fecha.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

// Validar formato de fecha
        if (!fecha.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Formato de fecha incorrecto. Debe ser YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false); // Esto evitará que fechas inválidas (por ejemplo, 2024-02-30) pasen la validación
            Date parsedDate = sdf.parse(fecha);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Fecha inválida. Debe seguir el formato YYYY-MM-DD", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            TalonarioDAO talonarioDAO = new TalonarioDAO(conexion);
            Talonario talonario = new Talonario(descripcion, premio, fecha, valorNumero); // Pasar la fecha como String

            talonarioDAO.agregarTalonario(talonario);
            limpiarCampos();
            mostrarTalonarios(); // Mostrar los talonarios actualizados en la tabla
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al agregar el talonario: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tfValorNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfValorNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfValorNumActionPerformed

    private void tfPremioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPremioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPremioActionPerformed

    private void tfDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDescripcionActionPerformed

    private void tblTalonarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTalonarioMouseClicked

        if (evt.getClickCount() == 2) { // Verificar si se hizo doble clic
            int filaSeleccionada = tblTalonario.getSelectedRow();
            if (filaSeleccionada != -1) { // Verificar si se seleccionó alguna fila
                // Obtener los datos de la fila seleccionada si es necesario
                Object[] datosFila = obtenerDatosFilaSeleccionada();
                // Crear e inicializar la ventana Prueba2
                Prueba2 prueba2 = new Prueba2();
                // Mostrar la ventana Prueba2
                prueba2.setVisible(true);
            }
        }
    }//GEN-LAST:event_tblTalonarioMouseClicked

    private void limpiarCampos() {
        tfDescripcion.setText("");
        tfPremio.setText("");
        tfFecha.setText("");
        tfValorNum.setText("");
    }

    // Método para inicializar el modelo de tabla
    private void inicializarModeloTabla() {
        // Definir las columnas de la tabla
        String[] columnas = {"ID", "Descripción", "Premio", "Fecha", "Valor Numeros"};

        // Crear un modelo de tabla predeterminado sin datos iniciales
        modeloTabla = new DefaultTableModel(columnas, 0); // 0 indica que inicialmente no hay filas
        // Asignar el modelo de tabla a la tabla
        tblTalonario.setModel(modeloTabla);
    }

    // Método para agregar una fila al modelo de tabla
    private void agregarFila(Object[] fila) {
        modeloTabla.addRow(fila);
    }

    // Método para eliminar todas las filas del modelo de tabla
    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    // Método para obtener los datos de una fila seleccionada en la tabla
    private Object[] obtenerDatosFilaSeleccionada() {
        int filaSeleccionada = tblTalonario.getSelectedRow();
        if (filaSeleccionada != -1) {
            int cantidadColumnas = modeloTabla.getColumnCount();
            Object[] datosFila = new Object[cantidadColumnas];
            for (int i = 0; i < cantidadColumnas; i++) {
                datosFila[i] = modeloTabla.getValueAt(filaSeleccionada, i);
            }
            return datosFila;
        }
        return null;
    }

    private void mostrarTalonarios() {
        limpiarTabla(); // Limpiar la tabla antes de cargar los talonarios nuevamente
        try {
            TalonarioDAO talonarioDAO = new TalonarioDAO(conexion);
            List<Talonario> listaTalonarios = talonarioDAO.obtenerTodos();
            for (Talonario talonario : listaTalonarios) {
                Object[] fila = {
                    talonario.getId(),
                    talonario.getDescripcion(),
                    talonario.getPremio(),
                    talonario.getFecha(),
                    talonario.getValorNumero()
                };
                agregarFila(fila); // Agregar la fila a la tabla
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se mostraron los registros, error: " + ex.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioCRUD().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblPremio;
    private javax.swing.JLabel lblValorNum;
    private javax.swing.JTable tblTalonario;
    private javax.swing.JTextField tfDescripcion;
    private javax.swing.JTextField tfFecha;
    private javax.swing.JTextField tfPremio;
    private javax.swing.JTextField tfValorNum;
    // End of variables declaration//GEN-END:variables
}
